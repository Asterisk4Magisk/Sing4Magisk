#!/system/bin/sh
magisk_busybox="/data/adb/magisk/busybox"
 
bin_name="sing"
module_path="/data/adb/${bin_name}"
config="config.json"
source ${module_path}/sing.config
bin_path="${module_path}/bin/${bin_name}-box"
pid_file="${module_path}/run/${bin_name}.pid"
error_log="${module_path}/run/error.log"
conf_file="${module_path}/confs/${config}"
bin_opts="-D ${module_path}/assets -c ${conf_file} run"
sing_gid="3005"

probe_sing_alive() {
  [ -f ${pid_file} ] && cmd_file="/proc/`cat ${pid_file}`/cmdline" || return 1
  [ -f ${cmd_file} ] && grep -q ${bin_path} ${cmd_file} && return 0 || return 1
}

display_sing_pid() {
  if probe_sing_alive ; then
    echo "[Info]: ${bin_name} service is running. ( PID: `cat ${pid_file}` )"
    return 0
  else
    echo "[Info]: ${bin_name} service is stopped."
    return 1
  fi
}

find_netstat_path() {
  [ -f /system/bin/netstat ] && alias netstat="/system/bin/netstat" && return 0
  [ -f /system/xbin/netstat ] && alias netstat="/system/xbin/netstat" && return 0
  return 1
}

wait_sing_listen() {
  wait_count=0
  sing_pid=`cat ${pid_file}`
  find_netstat_path && \
  check_sing_cmd="netstat -tnlp | grep -q sing" || \
  check_sing_cmd="ls -lh /proc/${sing_pid}/fd | grep -q socket"
  while probe_sing_alive && ! eval "${check_sing_cmd}" && [ ${wait_count} -lt 100 ] ; do
    sleep 1 ; wait_count=$((${wait_count} + 1))
  done
  if probe_sing_alive && eval "${check_sing_cmd}" ; then
    return 0
  else
    return 1
  fi
}

start_service() {
  if probe_sing_alive ; then
    echo "[Info]: ${bin_name} service is running. ( PID: `cat ${pid_file}` )"
    return 0
  elif [ -f ${conf_file} ] ; then
    echo "[Info]: Starting ${bin_name} service."
    mkdir -p ${module_path}/run
    ulimit -SHn 1000000
    nohup ${magisk_busybox} setuidgid 0:${sing_gid} ${bin_path} ${bin_opts} 2>&1 > ${error_log} &
    echo -n $! > ${pid_file}
    if wait_sing_listen ; then
      echo "[Info]: ${bin_name} service is running. ( PID: `cat ${pid_file}` )"
      return 0
    else
      if probe_sing_alive ; then
        echo "[Warning]: ${bin_name} service is running but may not listening. ( PID: `cat ${pid_file}` )"
        return 0
      else
        echo "[Error]: Start ${bin_name} service Failed."
        rm -f ${pid_file}
        return 1
      fi
    fi
  else
    return 2
  fi
}

stop_service() {
  if display_sing_pid ; then
    echo "[Info]: Stopping ${bin_name} service."
    kill `cat ${pid_file}`
    sleep 1
    display_sing_pid
  fi
  rm -f ${pid_file}
}

case "$1" in
  start)
    start_service
    ;;
  stop)
    stop_service
    ;;
  restart)
    stop_service
    start_service
    ;;
  status)
    display_sing_pid
    ;;
  *)
    echo "$0:  usage:  $0 {start|stop|restart|status}"
    ;;
esac
